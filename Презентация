Apache Kafka — это распределенная потоковая платформа, предназначенная для обработки, хранения и передачи больших объемов данных в реальном времени. Она была разработана в LinkedIn и позже открыта как проект с открытым исходным кодом. Сегодня Kafka является одной из самых популярных систем для обработки потоковых данных и используется такими компаниями, как Netflix, Uber, Airbnb, Twitter и многими другими.

Основные концепции Kafka
Поток данных (Stream):

Kafka работает с потоками данных, которые представляют собой непрерывные последовательности событий (например, логи, транзакции, сообщения).

Эти данные могут поступать от различных источников, таких как приложения, устройства IoT, базы данных и т.д.

Топики (Topics):

Топик — это категория или имя потока данных.

Данные в Kafka организованы в топики, которые похожи на таблицы в базе данных или каналы в messaging systems.

Пример: топик user_actions может содержать данные о действиях пользователей на сайте.

Партиции (Partitions):

Каждый топик делится на партиции — независимые части данных.

Партиции позволяют Kafka масштабироваться и обрабатывать данные параллельно.

Данные в партициях упорядочены, и каждое сообщение имеет уникальный offset (смещение).

Производители (Producers):

Производители — это приложения или сервисы, которые отправляют данные в Kafka.

Они публикуют сообщения в топики.

Пример: веб-приложение, которое отправляет данные о действиях пользователей в топик user_actions.

Потребители (Consumers):

Потребители — это приложения или сервисы, которые читают данные из Kafka.

Они подписываются на топики и обрабатывают сообщения.

Пример: аналитическая система, которая читает данные из топика user_actions для построения отчетов.

Брокеры (Brokers):

Брокеры — это серверы, которые хранят данные и управляют топиками и партициями.

Kafka кластер состоит из нескольких брокеров, что обеспечивает отказоустойчивость и масштабируемость.

Репликация (Replication):

Данные в Kafka реплицируются между брокерами для обеспечения отказоустойчивости.

Каждая партиция имеет несколько реплик (копий), которые хранятся на разных брокерах.

Одна из реплик является лидером, остальные — фолловерами.

ZooKeeper (до KRaft):

ZooKeeper использовался для управления метаданными Kafka (например, информация о брокерах, топиках, партициях).

С появлением Kafka KRaft необходимость в ZooKeeper отпала.
